import numpy as np
from learnMSA.msa_hmm import Initializers 

def make_transition_init_A():
    d = {"begin_to_match" : [0.6, 0.1, 0.1, 0.1],
              "match_to_end" : [0.01, 0.05, 0.05, 1],
              "match_to_match" : [0.97, 0.5, 0.6], 
              "match_to_insert" : [0.01, 0.05, 0.3],
              "insert_to_match" : [0.5, 0.5, 0.5], 
              "insert_to_insert" : [0.5, 0.5, 0.5],
              "match_to_delete" : [0.1, 0.01, 0.4, 0.05], 
               "delete_to_match" : [0.8, 0.5, 0.8, 1],
               "delete_to_delete" : [0.2, 0.5, 0.2],
               #must assume that flaking probs are tied
               "left_flank_loop" : [0.6], 
               "left_flank_exit" : [0.4],
               "right_flank_loop" : [0.6], 
               "right_flank_exit" : [0.4],
               "unannotated_segment_loop" : [0.9], 
               "unannotated_segment_exit" : [0.1],
               "end_to_unannotated_segment" : [0.2], 
              "end_to_right_flank" : [0.7], 
              "end_to_terminal" : [0.1]}
    return {part_name : Initializers.ConstantInitializer(np.log(p))
                              for part_name,p in d.items()} 
    
def make_emission_init_A():
    emission_kernel_initializer = np.log([[0.5, 0.5], [0.1, 0.9], [0.7, 0.3], [0.9, 0.1]])
    return Initializers.ConstantInitializer(emission_kernel_initializer)

def make_insertion_init():
    insertion_kernel_initializer = np.log([0.5, 0.5])
    return Initializers.ConstantInitializer(insertion_kernel_initializer)
    
def make_transition_init_B():
    d = {"begin_to_match" : [0.7, 0.1, 0.1],
              "match_to_end" : [0.01, 0.05, 1],
              "match_to_match" : [0.97, 0.5], 
              "match_to_insert" : [0.01, 0.05],
              "insert_to_match" : [0.5, 0.9], 
              "insert_to_insert" : [0.5, 0.1],
              "match_to_delete" : [0.1, 0.01, 0.4], 
               "delete_to_match" : [0.8, 0.5, 1],
               "delete_to_delete" : [0.2, 0.5],
               #must assume that flaking probs are tied
               "left_flank_loop" : [0.6], 
               "left_flank_exit" : [0.4],
               "right_flank_loop" : [0.6], 
               "right_flank_exit" : [0.4],
               "unannotated_segment_loop" : [0.9], 
               "unannotated_segment_exit" : [0.1],
               "end_to_unannotated_segment" : [0.2], 
              "end_to_right_flank" : [0.7], 
              "end_to_terminal" : [0.1]}
    return {part_name : Initializers.ConstantInitializer(np.log(p))
                              for part_name,p in d.items()} 
    
def make_emission_init_B():
    emission_kernel_initializer = np.log([[0.5, 0.5], [0.1, 0.9], [0.7, 0.3]])
    return Initializers.ConstantInitializer(emission_kernel_initializer)

    
def get_ref_model_A():
    return (np.array([[6.0000e-01, 2.4000e-01, 7.2000e-02, 4.4000e-02, 4.3200e-02,
         0.0000e+00, 0.0000e+00, 0.0000e+00, 1.6000e-04, 5.6000e-04,
         8.0000e-05],
        [0.0000e+00, 0.0000e+00, 9.7000e-01, 5.0000e-03, 4.0000e-03,
         1.0000e-02, 0.0000e+00, 0.0000e+00, 2.2000e-03, 7.7000e-03,
         1.1000e-03],
        [0.0000e+00, 0.0000e+00, 0.0000e+00, 5.0000e-01, 3.2000e-01,
         0.0000e+00, 5.0000e-02, 0.0000e+00, 2.6000e-02, 9.1000e-02,
         1.3000e-02],
        [0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 6.0000e-01,
         0.0000e+00, 0.0000e+00, 3.0000e-01, 2.0000e-02, 7.0000e-02,
         1.0000e-02],
        [0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
         0.0000e+00, 0.0000e+00, 0.0000e+00, 2.0000e-01, 7.0000e-01,
         1.0000e-01],
        [0.0000e+00, 0.0000e+00, 5.0000e-01, 0.0000e+00, 0.0000e+00,
         5.0000e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
         0.0000e+00],
        [0.0000e+00, 0.0000e+00, 0.0000e+00, 5.0000e-01, 0.0000e+00,
         0.0000e+00, 5.0000e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00,
         0.0000e+00],
        [0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 5.0000e-01,
         0.0000e+00, 0.0000e+00, 5.0000e-01, 0.0000e+00, 0.0000e+00,
         0.0000e+00],
        [0.0000e+00, 6.0000e-02, 1.8000e-02, 1.1000e-02, 1.0800e-02,
         0.0000e+00, 0.0000e+00, 0.0000e+00, 9.0004e-01, 1.4000e-04,
         2.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
         0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 6.0000e-01,
         4.0000e-01],
        [0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
         0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
         1.0000e+00]]),
 np.array([[0.5, 0.5, 0. ],
        [0.5, 0.5, 0. ],
        [0.1, 0.9, 0. ],
        [0.7, 0.3, 0. ],
        [0.9, 0.1, 0. ],
        [0.5, 0.5, 0. ],
        [0.5, 0.5, 0. ],
        [0.5, 0.5, 0. ],
        [0.5, 0.5, 0. ],
        [0.5, 0.5, 0. ],
        [0. , 0. , 1. ]]),
 np.array([5.0e-01, 3.0e-01, 9.0e-02, 5.5e-02, 5.4e-02, 0.0e+00, 0.0e+00,
        0.0e+00, 2.0e-04, 7.0e-04, 1.0e-04]))
            
    
def get_ref_model_B():
    return (np.array([[6.000e-01, 2.800e-01, 7.200e-02, 4.400e-02, 0.000e+00, 0.000e+00,
         8.000e-04, 2.800e-03, 4.000e-04],
        [0.000e+00, 0.000e+00, 9.700e-01, 5.000e-03, 1.000e-02, 0.000e+00,
         3.000e-03, 1.050e-02, 1.500e-03],
        [0.000e+00, 0.000e+00, 0.000e+00, 5.000e-01, 0.000e+00, 5.000e-02,
         9.000e-02, 3.150e-01, 4.500e-02],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
         2.000e-01, 7.000e-01, 1.000e-01],
        [0.000e+00, 0.000e+00, 5.000e-01, 0.000e+00, 5.000e-01, 0.000e+00,
         0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 9.000e-01, 0.000e+00, 1.000e-01,
         0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 7.000e-02, 1.800e-02, 1.100e-02, 0.000e+00, 0.000e+00,
         9.002e-01, 7.000e-04, 1.000e-04],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
         0.000e+00, 6.000e-01, 4.000e-01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
         0.000e+00, 0.000e+00, 1.000e+00]]),
 np.array([[0.5, 0.5, 0. ],
        [0.5, 0.5, 0. ],
        [0.1, 0.9, 0. ],
        [0.7, 0.3, 0. ],
        [0.5, 0.5, 0. ],
        [0.5, 0.5, 0. ],
        [0.5, 0.5, 0. ],
        [0.5, 0.5, 0. ],
        [0. , 0. , 1. ]]),
 np.array([0.5   , 0.35  , 0.09  , 0.055 , 0.    , 0.    , 0.001 , 0.0035,
        0.0005]))


def get_ref_forward_A():
    return np.array([[2.50000000e-01, 1.50000000e-01, 9.00000000e-03, 3.85000000e-02,
        4.86000000e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        1.00000000e-04, 3.50000000e-04, 0.00000000e+00],
       [7.50000000e-02, 3.00030000e-02, 1.47151620e-01, 4.87533000e-03,
        3.73810800e-03, 7.50000000e-04, 2.25000000e-04, 5.77500000e-03,
        5.59200200e-03, 1.95195070e-02, 0.00000000e+00],
       [2.25000000e-02, 9.16776006e-03, 3.49785660e-03, 5.40398859e-02,
        5.06894598e-02, 3.37515000e-04, 3.73504050e-03, 2.17504950e-03,
        4.89105120e-03, 1.41671282e-02, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 1.13336506e-02]])


def get_ref_backward_A():
    return np.array([[6.55932264e-03, 4.47112347e-02, 2.02424452e-02, 1.93615440e-02,
        4.21142400e-02, 2.28876170e-02, 1.10750300e-02, 1.82501000e-02,
        1.81209072e-03, 3.60000000e-02, 0.00000000e+00],
       [4.55760160e-03, 3.19602200e-03, 5.05002600e-02, 6.80002000e-02,
        1.40002000e-01, 6.50000000e-04, 3.50000000e-03, 4.50000000e-02,
        1.14240040e-03, 1.20000000e-01, 0.00000000e+00],
       [8.00000000e-05, 1.10000000e-03, 1.30000000e-02, 1.00000000e-02,
        1.00000000e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        2.00000000e-05, 4.00000000e-01, 1.00000000e+00],
       [1.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
        1.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
        1.00000000e+00, 1.00000000e+00, 1.00000000e+00]])


def get_ref_lik_A():
    return 0.0113336505940908


def get_ref_posterior_probs_A():
    return np.array([[1.44686890e-01, 5.91749777e-01, 1.60744330e-02, 6.57704627e-02,
        1.80590715e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        1.59885882e-05, 1.11173358e-03, 0.00000000e+00],
       [3.01597545e-02, 8.46066740e-03, 6.55675328e-01, 2.92512472e-02,
        4.61759953e-02, 4.30135018e-05, 6.94833490e-05, 2.29295052e-02,
        5.63658220e-04, 2.06671347e-01, 0.00000000e+00],
       [1.58819083e-04, 8.89787097e-04, 4.01213497e-03, 4.76809175e-02,
        4.47247420e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        8.63102521e-06, 5.00002291e-01, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 1.00000000e+00]])


def get_ref_scaled_forward_A():
    return np.array([[5.03473970e-01, 3.02084382e-01, 1.81250629e-02, 7.75349914e-02,
        9.78753398e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        2.01389588e-04, 7.04863559e-04, 0.00000000e+00],
       [2.56296726e-01, 1.02528942e-01, 5.02859713e-01, 1.66604149e-02,
        1.27741979e-02, 2.56296726e-03, 7.68890178e-04, 1.97348479e-02,
        1.91094907e-02, 6.67038099e-02, 0.00000000e+00],
       [1.36197932e-01, 5.54946648e-02, 2.11733704e-02, 3.27116475e-01,
        3.06835537e-01, 2.04305977e-03, 2.26091018e-02, 1.31660997e-02,
        2.96067136e-02, 8.57570467e-02, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 1.00000000e+00]])
    
    
def get_ref_forward_B():
    return np.array([[2.50000000e-01, 1.75000000e-01, 9.00000000e-03, 3.85000000e-02,
        0.00000000e+00, 0.00000000e+00, 5.00000000e-04, 1.75000000e-03,
        0.00000000e+00],
       [7.50000000e-02, 3.50175000e-02, 1.68983100e-01, 4.91415000e-03,
        8.75000000e-04, 2.25000000e-04, 4.84255000e-03, 1.66864250e-02,
        0.00000000e+00],
       [2.25000000e-02, 1.06694892e-02, 3.98916409e-03, 6.17556839e-02,
        3.93837500e-04, 4.23582750e-03, 1.03578125e-02, 3.36312550e-02,
        0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        1.98336228e-02]])


def get_ref_backward_B():
    return np.array([[1.06095920e-02, 8.64108263e-02, 4.15254829e-02, 4.21088510e-02,
        4.46645250e-02, 4.09527000e-02, 2.82017450e-03, 3.60000000e-02,
        0.00000000e+00],
       [4.29404000e-03, 6.81515000e-03, 9.80045000e-02, 1.40010000e-01,
        2.25000000e-03, 6.30000000e-02, 1.08851000e-03, 1.20000000e-01,
        0.00000000e+00],
       [4.00000000e-04, 1.50000000e-03, 4.50000000e-02, 1.00000000e-01,
        0.00000000e+00, 0.00000000e+00, 1.00000000e-04, 4.00000000e-01,
        1.00000000e+00],
       [1.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
        1.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
        1.00000000e+00]])


def get_ref_lik_B():
    return 0.0198336227946755


def get_ref_posterior_probs_B():
    return np.array([[1.33732401e-01, 7.62437340e-01, 1.88432215e-02, 8.17395178e-02,
        0.00000000e+00, 0.00000000e+00, 7.10957985e-05, 3.17642423e-03,
        0.00000000e+00],
       [1.62377294e-02, 1.20325731e-02, 8.35001472e-01, 3.46900891e-02,
        9.92632572e-05, 7.14695452e-04, 2.65769101e-04, 1.00958409e-01,
        0.00000000e+00],
       [4.53774890e-04, 8.06924385e-04, 9.05091248e-03, 3.11368652e-01,
        0.00000000e+00, 0.00000000e+00, 5.22235025e-05, 6.78267513e-01,
        0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        1.00000000e+00]])


def get_ref_scaled_forward_B():
    return np.array([[5.26592944e-01, 3.68615061e-01, 1.89573460e-02, 8.10953133e-02,
        0.00000000e+00, 0.00000000e+00, 1.05318589e-03, 3.68615061e-03,
        0.00000000e+00],
       [2.44663302e-01, 1.14233296e-01, 5.51252843e-01, 1.60308289e-02,
        2.85440519e-03, 7.33989906e-04, 1.57972570e-02, 5.44340779e-02,
        0.00000000e+00],
       [1.52508180e-01, 7.23193062e-02, 2.70391181e-02, 4.18588754e-01,
        2.66948624e-03, 2.87110375e-02, 7.02067172e-02, 2.27957400e-01,
        0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        1.00000000e+00]])